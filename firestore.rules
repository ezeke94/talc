rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users: Admins manage all, users manage their own profile and notifications (updated 2025-10-10)
    match /users/{userId} {
      // All authed users can read user profiles
      allow read: if isAuthed();

      // Create allowed for the user themselves or admin
      allow create: if isSelf() || isAdmin();

      // Delete only by admin
      allow delete: if isAdmin();

      // Update rules:
      //  - Admins and Quality can update any fields
      //  - The user can only update notification-related fields (fcmToken, notificationsEnabled, lastTokenUpdate)
      allow update: if (
        isAdmin() || isQuality() ||
        (isSelf() && request.resource.data.diff(resource.data).changedKeys().hasOnly(['fcmToken', 'notificationsEnabled', 'lastTokenUpdate']))
      );

      // Devices subcollection: users can manage their own devices; admins can read all devices
      match /devices/{deviceId} {
        allow read: if isAuthed() && (request.auth.uid == userId || isAdmin());
        allow write: if isAuthed() && request.auth.uid == userId;
      }
    }
    // Events: Authenticated users can read/create, update/delete by owner/admin/quality
    // All users can update todos and status fields for task management
    match /events/{eventId} {
      allow read, create: if isAuthed();
      allow update: if isAuthed() && (
        // Allow all users to update todos and status for task management
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['todos', 'status'])) ||
        // Allow full updates by creators, admins, and quality team
        (resource.data.createdBy.userId == request.auth.uid || isAdmin() || isQuality())
      );
      allow delete: if isAuthed() && (isAdmin() || isQuality());
    }
    // SOPs: Authenticated users can read/create, update/delete by admin/quality
    match /sops/{sopId} {
      allow read, create: if isAuthed();
      allow update, delete: if isAdmin() || isQuality();
    }
    // Centers: All authed users can read, only admin can write
    match /centers/{centerId} {
      allow read: if isAuthed();
      allow write: if isAdmin();
    }
    // Mentors: All authed users can read, only admin can write
    match /mentors/{mentorId} {
      allow read: if isAuthed();
      allow write: if isAdmin();
    }
    // KPI Submissions: All authed users can read/write
    match /kpiSubmissions/{submissionId} {
      allow read, write: if isAuthed();
    }
    // KPI Forms: All authed users can read, only admin can write
    match /kpiForms/{formId} {
      allow read: if isAuthed();
      allow write: if isAdmin();
    }
    // Notifications: Only owner can read/update, only admin can create
    match /notifications/{notificationId} {
      allow read, update: if isSelfNotification();
      allow create: if isAdmin();
    }
    // Metrics: All authed users can read, only admin can write
    match /metrics/{metricId} {
      allow read: if isAuthed();
      allow write: if isAdmin();
    }
    // Projects: Admin/Quality can read/write, Coordinator can read
    match /projects/{projectId} {
      allow read, write: if isAdmin() || isQuality();
      allow read: if isCoordinator();
    }
    // Notification Log: Only accessible by Cloud Functions (not by clients)
    match /_notificationLog/{logId} {
      allow read, write: if false; // Only Cloud Functions with admin SDK can access
    }
    // Default: Authenticated users can read
    match /{document=**} {
      allow read: if isAuthed();
    }
    // Helper functions
    function isAuthed() {
      return request.auth != null;
    }
    function isSelf() {
      return isAuthed() && request.auth.uid == userId;
    }
    function isSelfNotification() {
      return isAuthed() && resource.data.userId == request.auth.uid;
    }
    function isAdmin() {
      return isAuthed() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Admin";
    }
    function isQuality() {
      return isAuthed() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Quality";
    }
    function isCoordinator() {
      return isAuthed() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Coordinator";
    }
    // Removed unused isSafeSelfCreate function
  }
}
